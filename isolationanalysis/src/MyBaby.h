// -*- C++ -*-
// This is a header file generated with the command:
// makeCMS3ClassFiles("/hadoop/cms/store/user/phchang/AutoTwopler_babies/general_v0.0.9_isostudy/WWW_4F_TuneCUETP8M1_13TeV-amcatnlo-pythia8_RunIISummer16MiniAODv2-PUMoriond17_80X_mcRun2_asymptotic_2016_TrancheIV_v6-v1/output_tree/output_tree_1.root", "MyBaby", "MyBaby", "tas", "mytree")

#ifndef MyBaby_H
#define MyBaby_H

#include "Math/LorentzVector.h"
#include "Math/Point3D.h"
#include "TMath.h"
#include "TBranch.h"
#include "TTree.h"
#include "TH1F.h"
#include "TFile.h"
#include "TBits.h"
#include <vector> 
#include <unistd.h> 
typedef ROOT::Math::LorentzVector< ROOT::Math::PxPyPzE4D<float> > LorentzVector;

using namespace std; 
class MyBaby {
 private: 
 protected: 
  unsigned int index;
  int      truth_n_;
  TBranch *truth_n_branch;
  bool     truth_n_isLoaded;
  vector<float> *truth_pt_;
  TBranch *truth_pt_branch;
  bool     truth_pt_isLoaded;
  vector<float> *truth_eta_;
  TBranch *truth_eta_branch;
  bool     truth_eta_isLoaded;
  vector<float> *truth_phi_;
  TBranch *truth_phi_branch;
  bool     truth_phi_isLoaded;
  vector<float> *truth_mass_;
  TBranch *truth_mass_branch;
  bool     truth_mass_isLoaded;
  vector<float> *truth_energy_;
  TBranch *truth_energy_branch;
  bool     truth_energy_isLoaded;
  vector<int> *truth_pdgId_;
  TBranch *truth_pdgId_branch;
  bool     truth_pdgId_isLoaded;
  vector<int> *truth_status_;
  TBranch *truth_status_branch;
  bool     truth_status_isLoaded;
  vector<int> *truth_motherId_;
  TBranch *truth_motherId_branch;
  bool     truth_motherId_isLoaded;
  vector<int> *truth_grandmotherId_;
  TBranch *truth_grandmotherId_branch;
  bool     truth_grandmotherId_isLoaded;
  int      lep_n_;
  TBranch *lep_n_branch;
  bool     lep_n_isLoaded;
  vector<float> *lep_pt_;
  TBranch *lep_pt_branch;
  bool     lep_pt_isLoaded;
  vector<float> *lep_eta_;
  TBranch *lep_eta_branch;
  bool     lep_eta_isLoaded;
  vector<float> *lep_phi_;
  TBranch *lep_phi_branch;
  bool     lep_phi_isLoaded;
  vector<float> *lep_mass_;
  TBranch *lep_mass_branch;
  bool     lep_mass_isLoaded;
  vector<float> *lep_energy_;
  TBranch *lep_energy_branch;
  bool     lep_energy_isLoaded;
  vector<float> *lep_dxy_;
  TBranch *lep_dxy_branch;
  bool     lep_dxy_isLoaded;
  vector<float> *lep_dz_;
  TBranch *lep_dz_branch;
  bool     lep_dz_isLoaded;
  vector<float> *lep_ip3d_;
  TBranch *lep_ip3d_branch;
  bool     lep_ip3d_isLoaded;
  vector<float> *lep_sip3d_;
  TBranch *lep_sip3d_branch;
  bool     lep_sip3d_isLoaded;
  vector<int> *lep_tightcharge_;
  TBranch *lep_tightcharge_branch;
  bool     lep_tightcharge_isLoaded;
  vector<int> *lep_charge_;
  TBranch *lep_charge_branch;
  bool     lep_charge_isLoaded;
  vector<int> *lep_pdgId_;
  TBranch *lep_pdgId_branch;
  bool     lep_pdgId_isLoaded;
  vector<int> *lep_id_;
  TBranch *lep_id_branch;
  bool     lep_id_isLoaded;
  vector<float> *lep_ptRatio_;
  TBranch *lep_ptRatio_branch;
  bool     lep_ptRatio_isLoaded;
  vector<float> *lep_ptRel_;
  TBranch *lep_ptRel_branch;
  bool     lep_ptRel_isLoaded;
  vector<float> *lep_relIso03_;
  TBranch *lep_relIso03_branch;
  bool     lep_relIso03_isLoaded;
  vector<float> *lep_relIso03DB_;
  TBranch *lep_relIso03DB_branch;
  bool     lep_relIso03DB_isLoaded;
  vector<float> *lep_relIso03EA_;
  TBranch *lep_relIso03EA_branch;
  bool     lep_relIso03EA_isLoaded;
  vector<float> *lep_relIso03EAv2_;
  TBranch *lep_relIso03EAv2_branch;
  bool     lep_relIso03EAv2_isLoaded;
  vector<float> *lep_relIso04_;
  TBranch *lep_relIso04_branch;
  bool     lep_relIso04_isLoaded;
  vector<float> *lep_relIso04DB_;
  TBranch *lep_relIso04DB_branch;
  bool     lep_relIso04DB_isLoaded;
  vector<float> *lep_relIso04EA_;
  TBranch *lep_relIso04EA_branch;
  bool     lep_relIso04EA_isLoaded;
  vector<float> *lep_relIso04EAv2_;
  TBranch *lep_relIso04EAv2_branch;
  bool     lep_relIso04EAv2_isLoaded;
  vector<float> *lep_miniRelIsoCMS3_EA_;
  TBranch *lep_miniRelIsoCMS3_EA_branch;
  bool     lep_miniRelIsoCMS3_EA_isLoaded;
  vector<float> *lep_miniRelIsoCMS3_EAv2_;
  TBranch *lep_miniRelIsoCMS3_EAv2_branch;
  bool     lep_miniRelIsoCMS3_EAv2_isLoaded;
  vector<float> *lep_miniRelIsoCMS3_DB_;
  TBranch *lep_miniRelIsoCMS3_DB_branch;
  bool     lep_miniRelIsoCMS3_DB_isLoaded;
  vector<float> *lep_relIso005EAstudy_;
  TBranch *lep_relIso005EAstudy_branch;
  bool     lep_relIso005EAstudy_isLoaded;
  vector<float> *lep_relIso010EAstudy_;
  TBranch *lep_relIso010EAstudy_branch;
  bool     lep_relIso010EAstudy_isLoaded;
  vector<float> *lep_relIso015EAstudy_;
  TBranch *lep_relIso015EAstudy_branch;
  bool     lep_relIso015EAstudy_isLoaded;
  vector<float> *lep_relIso020EAstudy_;
  TBranch *lep_relIso020EAstudy_branch;
  bool     lep_relIso020EAstudy_isLoaded;
  vector<float> *lep_relIso025EAstudy_;
  TBranch *lep_relIso025EAstudy_branch;
  bool     lep_relIso025EAstudy_isLoaded;
  vector<float> *lep_relIso030EAstudy_;
  TBranch *lep_relIso030EAstudy_branch;
  bool     lep_relIso030EAstudy_isLoaded;
  vector<float> *lep_relIso035EAstudy_;
  TBranch *lep_relIso035EAstudy_branch;
  bool     lep_relIso035EAstudy_isLoaded;
  vector<float> *lep_relIso045EAstudy_;
  TBranch *lep_relIso045EAstudy_branch;
  bool     lep_relIso045EAstudy_isLoaded;
  vector<float> *lep_relIso050EAstudy_;
  TBranch *lep_relIso050EAstudy_branch;
  bool     lep_relIso050EAstudy_isLoaded;
  vector<float> *lep_muPOverP_;
  TBranch *lep_muPOverP_branch;
  bool     lep_muPOverP_isLoaded;
  vector<int> *lep_muPidPFMuon_;
  TBranch *lep_muPidPFMuon_branch;
  bool     lep_muPidPFMuon_isLoaded;
  vector<int> *lep_muType_;
  TBranch *lep_muType_branch;
  bool     lep_muType_isLoaded;
  vector<float> *lep_muChi2OverNDof_;
  TBranch *lep_muChi2OverNDof_branch;
  bool     lep_muChi2OverNDof_isLoaded;
  vector<float> *lep_muChi2LocalPosition_;
  TBranch *lep_muChi2LocalPosition_branch;
  bool     lep_muChi2LocalPosition_isLoaded;
  vector<float> *lep_muTrkKink_;
  TBranch *lep_muTrkKink_branch;
  bool     lep_muTrkKink_isLoaded;
  vector<float> *lep_muValidHitFraction_;
  TBranch *lep_muValidHitFraction_branch;
  bool     lep_muValidHitFraction_isLoaded;
  vector<float> *lep_muSegmCompatibility_;
  TBranch *lep_muSegmCompatibility_branch;
  bool     lep_muSegmCompatibility_isLoaded;
  vector<int> *lep_muGFitValidSTAHits_;
  TBranch *lep_muGFitValidSTAHits_branch;
  bool     lep_muGFitValidSTAHits_isLoaded;
  vector<int> *lep_muNMatchedStations_;
  TBranch *lep_muNMatchedStations_branch;
  bool     lep_muNMatchedStations_isLoaded;
  vector<int> *lep_muValidPixelHits_;
  TBranch *lep_muValidPixelHits_branch;
  bool     lep_muValidPixelHits_isLoaded;
  vector<int> *lep_muNLayers_;
  TBranch *lep_muNLayers_branch;
  bool     lep_muNLayers_isLoaded;
  vector<float> *lep_elEtaSC_;
  TBranch *lep_elEtaSC_branch;
  bool     lep_elEtaSC_isLoaded;
  vector<float> *lep_elSigmaIEtaIEta_full5x5_;
  TBranch *lep_elSigmaIEtaIEta_full5x5_branch;
  bool     lep_elSigmaIEtaIEta_full5x5_isLoaded;
  vector<float> *lep_elHOverE_;
  TBranch *lep_elHOverE_branch;
  bool     lep_elHOverE_isLoaded;
  vector<float> *lep_elMvaRaw_;
  TBranch *lep_elMvaRaw_branch;
  bool     lep_elMvaRaw_isLoaded;
  vector<float> *lep_elMva_;
  TBranch *lep_elMva_branch;
  bool     lep_elMva_isLoaded;
  vector<float> *lep_elDEtaIn_;
  TBranch *lep_elDEtaIn_branch;
  bool     lep_elDEtaIn_isLoaded;
  vector<float> *lep_elDPhiIn_;
  TBranch *lep_elDPhiIn_branch;
  bool     lep_elDPhiIn_isLoaded;
  vector<float> *lep_elEpRatio_;
  TBranch *lep_elEpRatio_branch;
  bool     lep_elEpRatio_isLoaded;
  vector<int> *lep_elConvVeto_;
  TBranch *lep_elConvVeto_branch;
  bool     lep_elConvVeto_isLoaded;
  vector<int> *lep_elNmiss_;
  TBranch *lep_elNmiss_branch;
  bool     lep_elNmiss_isLoaded;
  vector<int> *lep_isFromX_;
  TBranch *lep_isFromX_branch;
  bool     lep_isFromX_isLoaded;
  int      jet_n_;
  TBranch *jet_n_branch;
  bool     jet_n_isLoaded;
  vector<float> *jet_pt_;
  TBranch *jet_pt_branch;
  bool     jet_pt_isLoaded;
  vector<float> *jet_eta_;
  TBranch *jet_eta_branch;
  bool     jet_eta_isLoaded;
  vector<float> *jet_phi_;
  TBranch *jet_phi_branch;
  bool     jet_phi_isLoaded;
  vector<float> *jet_mass_;
  TBranch *jet_mass_branch;
  bool     jet_mass_isLoaded;
  vector<float> *jet_energy_;
  TBranch *jet_energy_branch;
  bool     jet_energy_isLoaded;
  vector<float> *jet_btagCSV_;
  TBranch *jet_btagCSV_branch;
  bool     jet_btagCSV_isLoaded;
  vector<float> *jet_rawPt_;
  TBranch *jet_rawPt_branch;
  bool     jet_rawPt_isLoaded;
  vector<float> *jet_mcPt_;
  TBranch *jet_mcPt_branch;
  bool     jet_mcPt_isLoaded;
  vector<int> *jet_mcFlavour_;
  TBranch *jet_mcFlavour_branch;
  bool     jet_mcFlavour_isLoaded;
  vector<int> *jet_hadronFlavour_;
  TBranch *jet_hadronFlavour_branch;
  bool     jet_hadronFlavour_isLoaded;
  vector<float> *jet_area_;
  TBranch *jet_area_branch;
  bool     jet_area_isLoaded;
  vector<float> *jet_undoJEC_;
  TBranch *jet_undoJEC_branch;
  bool     jet_undoJEC_isLoaded;
  vector<float> *jet_jecCorr_;
  TBranch *jet_jecCorr_branch;
  bool     jet_jecCorr_isLoaded;
  vector<float> *jet_jecCorrUp_;
  TBranch *jet_jecCorrUp_branch;
  bool     jet_jecCorrUp_isLoaded;
  vector<float> *jet_jecCorrDn_;
  TBranch *jet_jecCorrDn_branch;
  bool     jet_jecCorrDn_isLoaded;
  vector<float> *jet_chf_;
  TBranch *jet_chf_branch;
  bool     jet_chf_isLoaded;
  vector<float> *jet_nhf_;
  TBranch *jet_nhf_branch;
  bool     jet_nhf_isLoaded;
  vector<float> *jet_cef_;
  TBranch *jet_cef_branch;
  bool     jet_cef_isLoaded;
  vector<float> *jet_nef_;
  TBranch *jet_nef_branch;
  bool     jet_nef_isLoaded;
  vector<float> *jet_muf_;
  TBranch *jet_muf_branch;
  bool     jet_muf_isLoaded;
  vector<float> *jet_cm_;
  TBranch *jet_cm_branch;
  bool     jet_cm_isLoaded;
  vector<float> *jet_nm_;
  TBranch *jet_nm_branch;
  bool     jet_nm_isLoaded;
  vector<float> *jet_puValue_;
  TBranch *jet_puValue_branch;
  bool     jet_puValue_isLoaded;
  vector<float> *jet_mcdr_;
  TBranch *jet_mcdr_branch;
  bool     jet_mcdr_isLoaded;
  vector<int> *jet_npfcand_;
  TBranch *jet_npfcand_branch;
  bool     jet_npfcand_isLoaded;
  vector<int> *jet_id_;
  TBranch *jet_id_branch;
  bool     jet_id_isLoaded;
  vector<int> *jet_puId_;
  TBranch *jet_puId_branch;
  bool     jet_puId_isLoaded;
  vector<int> *jet_puIdpuppi_;
  TBranch *jet_puIdpuppi_branch;
  bool     jet_puIdpuppi_isLoaded;
  vector<int> *jet_FSveto_;
  TBranch *jet_FSveto_branch;
  bool     jet_FSveto_isLoaded;
  float    met_pt_;
  TBranch *met_pt_branch;
  bool     met_pt_isLoaded;
  float    met_phi_;
  TBranch *met_phi_branch;
  bool     met_phi_isLoaded;
  int      evt_run_;
  TBranch *evt_run_branch;
  bool     evt_run_isLoaded;
  int      evt_lumi_;
  TBranch *evt_lumi_branch;
  bool     evt_lumi_isLoaded;
  int      evt_event_;
  TBranch *evt_event_branch;
  bool     evt_event_isLoaded;
  int      evt_nEvts_;
  TBranch *evt_nEvts_branch;
  bool     evt_nEvts_isLoaded;
  float    evt_scale1fb_;
  TBranch *evt_scale1fb_branch;
  bool     evt_scale1fb_isLoaded;
  float    gen_ht_;
  TBranch *gen_ht_branch;
  bool     gen_ht_isLoaded;
public: 
void Init(TTree *tree);
void GetEntry(unsigned int idx); 
void LoadAllBranches(); 
  const int &truth_n();
  const vector<float> &truth_pt();
  const vector<float> &truth_eta();
  const vector<float> &truth_phi();
  const vector<float> &truth_mass();
  const vector<float> &truth_energy();
  const vector<int> &truth_pdgId();
  const vector<int> &truth_status();
  const vector<int> &truth_motherId();
  const vector<int> &truth_grandmotherId();
  const int &lep_n();
  const vector<float> &lep_pt();
  const vector<float> &lep_eta();
  const vector<float> &lep_phi();
  const vector<float> &lep_mass();
  const vector<float> &lep_energy();
  const vector<float> &lep_dxy();
  const vector<float> &lep_dz();
  const vector<float> &lep_ip3d();
  const vector<float> &lep_sip3d();
  const vector<int> &lep_tightcharge();
  const vector<int> &lep_charge();
  const vector<int> &lep_pdgId();
  const vector<int> &lep_id();
  const vector<float> &lep_ptRatio();
  const vector<float> &lep_ptRel();
  const vector<float> &lep_relIso03();
  const vector<float> &lep_relIso03DB();
  const vector<float> &lep_relIso03EA();
  const vector<float> &lep_relIso03EAv2();
  const vector<float> &lep_relIso04();
  const vector<float> &lep_relIso04DB();
  const vector<float> &lep_relIso04EA();
  const vector<float> &lep_relIso04EAv2();
  const vector<float> &lep_miniRelIsoCMS3_EA();
  const vector<float> &lep_miniRelIsoCMS3_EAv2();
  const vector<float> &lep_miniRelIsoCMS3_DB();
  const vector<float> &lep_relIso005EAstudy();
  const vector<float> &lep_relIso010EAstudy();
  const vector<float> &lep_relIso015EAstudy();
  const vector<float> &lep_relIso020EAstudy();
  const vector<float> &lep_relIso025EAstudy();
  const vector<float> &lep_relIso030EAstudy();
  const vector<float> &lep_relIso035EAstudy();
  const vector<float> &lep_relIso045EAstudy();
  const vector<float> &lep_relIso050EAstudy();
  const vector<float> &lep_muPOverP();
  const vector<int> &lep_muPidPFMuon();
  const vector<int> &lep_muType();
  const vector<float> &lep_muChi2OverNDof();
  const vector<float> &lep_muChi2LocalPosition();
  const vector<float> &lep_muTrkKink();
  const vector<float> &lep_muValidHitFraction();
  const vector<float> &lep_muSegmCompatibility();
  const vector<int> &lep_muGFitValidSTAHits();
  const vector<int> &lep_muNMatchedStations();
  const vector<int> &lep_muValidPixelHits();
  const vector<int> &lep_muNLayers();
  const vector<float> &lep_elEtaSC();
  const vector<float> &lep_elSigmaIEtaIEta_full5x5();
  const vector<float> &lep_elHOverE();
  const vector<float> &lep_elMvaRaw();
  const vector<float> &lep_elMva();
  const vector<float> &lep_elDEtaIn();
  const vector<float> &lep_elDPhiIn();
  const vector<float> &lep_elEpRatio();
  const vector<int> &lep_elConvVeto();
  const vector<int> &lep_elNmiss();
  const vector<int> &lep_isFromX();
  const int &jet_n();
  const vector<float> &jet_pt();
  const vector<float> &jet_eta();
  const vector<float> &jet_phi();
  const vector<float> &jet_mass();
  const vector<float> &jet_energy();
  const vector<float> &jet_btagCSV();
  const vector<float> &jet_rawPt();
  const vector<float> &jet_mcPt();
  const vector<int> &jet_mcFlavour();
  const vector<int> &jet_hadronFlavour();
  const vector<float> &jet_area();
  const vector<float> &jet_undoJEC();
  const vector<float> &jet_jecCorr();
  const vector<float> &jet_jecCorrUp();
  const vector<float> &jet_jecCorrDn();
  const vector<float> &jet_chf();
  const vector<float> &jet_nhf();
  const vector<float> &jet_cef();
  const vector<float> &jet_nef();
  const vector<float> &jet_muf();
  const vector<float> &jet_cm();
  const vector<float> &jet_nm();
  const vector<float> &jet_puValue();
  const vector<float> &jet_mcdr();
  const vector<int> &jet_npfcand();
  const vector<int> &jet_id();
  const vector<int> &jet_puId();
  const vector<int> &jet_puIdpuppi();
  const vector<int> &jet_FSveto();
  const float &met_pt();
  const float &met_phi();
  const int &evt_run();
  const int &evt_lumi();
  const int &evt_event();
  const int &evt_nEvts();
  const float &evt_scale1fb();
  const float &gen_ht();

  static void progress(int nEventsTotal, int nEventsChain);
};

#ifndef __CINT__
extern MyBaby mytree;
#endif

namespace tas {
  const int &truth_n();
  const vector<float> &truth_pt();
  const vector<float> &truth_eta();
  const vector<float> &truth_phi();
  const vector<float> &truth_mass();
  const vector<float> &truth_energy();
  const vector<int> &truth_pdgId();
  const vector<int> &truth_status();
  const vector<int> &truth_motherId();
  const vector<int> &truth_grandmotherId();
  const int &lep_n();
  const vector<float> &lep_pt();
  const vector<float> &lep_eta();
  const vector<float> &lep_phi();
  const vector<float> &lep_mass();
  const vector<float> &lep_energy();
  const vector<float> &lep_dxy();
  const vector<float> &lep_dz();
  const vector<float> &lep_ip3d();
  const vector<float> &lep_sip3d();
  const vector<int> &lep_tightcharge();
  const vector<int> &lep_charge();
  const vector<int> &lep_pdgId();
  const vector<int> &lep_id();
  const vector<float> &lep_ptRatio();
  const vector<float> &lep_ptRel();
  const vector<float> &lep_relIso03();
  const vector<float> &lep_relIso03DB();
  const vector<float> &lep_relIso03EA();
  const vector<float> &lep_relIso03EAv2();
  const vector<float> &lep_relIso04();
  const vector<float> &lep_relIso04DB();
  const vector<float> &lep_relIso04EA();
  const vector<float> &lep_relIso04EAv2();
  const vector<float> &lep_miniRelIsoCMS3_EA();
  const vector<float> &lep_miniRelIsoCMS3_EAv2();
  const vector<float> &lep_miniRelIsoCMS3_DB();
  const vector<float> &lep_relIso005EAstudy();
  const vector<float> &lep_relIso010EAstudy();
  const vector<float> &lep_relIso015EAstudy();
  const vector<float> &lep_relIso020EAstudy();
  const vector<float> &lep_relIso025EAstudy();
  const vector<float> &lep_relIso030EAstudy();
  const vector<float> &lep_relIso035EAstudy();
  const vector<float> &lep_relIso045EAstudy();
  const vector<float> &lep_relIso050EAstudy();
  const vector<float> &lep_muPOverP();
  const vector<int> &lep_muPidPFMuon();
  const vector<int> &lep_muType();
  const vector<float> &lep_muChi2OverNDof();
  const vector<float> &lep_muChi2LocalPosition();
  const vector<float> &lep_muTrkKink();
  const vector<float> &lep_muValidHitFraction();
  const vector<float> &lep_muSegmCompatibility();
  const vector<int> &lep_muGFitValidSTAHits();
  const vector<int> &lep_muNMatchedStations();
  const vector<int> &lep_muValidPixelHits();
  const vector<int> &lep_muNLayers();
  const vector<float> &lep_elEtaSC();
  const vector<float> &lep_elSigmaIEtaIEta_full5x5();
  const vector<float> &lep_elHOverE();
  const vector<float> &lep_elMvaRaw();
  const vector<float> &lep_elMva();
  const vector<float> &lep_elDEtaIn();
  const vector<float> &lep_elDPhiIn();
  const vector<float> &lep_elEpRatio();
  const vector<int> &lep_elConvVeto();
  const vector<int> &lep_elNmiss();
  const vector<int> &lep_isFromX();
  const int &jet_n();
  const vector<float> &jet_pt();
  const vector<float> &jet_eta();
  const vector<float> &jet_phi();
  const vector<float> &jet_mass();
  const vector<float> &jet_energy();
  const vector<float> &jet_btagCSV();
  const vector<float> &jet_rawPt();
  const vector<float> &jet_mcPt();
  const vector<int> &jet_mcFlavour();
  const vector<int> &jet_hadronFlavour();
  const vector<float> &jet_area();
  const vector<float> &jet_undoJEC();
  const vector<float> &jet_jecCorr();
  const vector<float> &jet_jecCorrUp();
  const vector<float> &jet_jecCorrDn();
  const vector<float> &jet_chf();
  const vector<float> &jet_nhf();
  const vector<float> &jet_cef();
  const vector<float> &jet_nef();
  const vector<float> &jet_muf();
  const vector<float> &jet_cm();
  const vector<float> &jet_nm();
  const vector<float> &jet_puValue();
  const vector<float> &jet_mcdr();
  const vector<int> &jet_npfcand();
  const vector<int> &jet_id();
  const vector<int> &jet_puId();
  const vector<int> &jet_puIdpuppi();
  const vector<int> &jet_FSveto();
  const float &met_pt();
  const float &met_phi();
  const int &evt_run();
  const int &evt_lumi();
  const int &evt_event();
  const int &evt_nEvts();
  const float &evt_scale1fb();
  const float &gen_ht();
}
#endif
